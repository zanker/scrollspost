- cache("2/#{request.path}/#{Rails.cache.read("card-cache")}/#{DEPLOY_ID}", :expires_in => 30.minutes) do
  .row#search
    .span9
      .well.well-small.well-trimmed
        %form{:action => pricing_path}
          #resources.btn-group
            - Card::RESOURCE_MAP.each_key do |resource|
              %button.btn.btn-inverse{:class => @filters[:resources][resource] ? :active : nil, "data-key" => resource}
                .resources.size-28{:class => "resource-#{resource}"}

          #rarities.btn-group
            - Card::RARITY_MAP.each do |id, rarity|
              %button.btn.btn-inverse{:class => @filters[:rarities][id] ? :active : nil, "data-key" => rarity}
                %span{:class => "rarity-#{id}"}
                  = t("short_rarities.#{rarity}")

          #last.dropdown
            %a.dropdown-toggle{"data-toggle" => :dropdown, :href => "#"}
              %span
                #{t(".last_prefix")}
                %span
              %strong.caret
            %ul.dropdown-menu
              - PricingController::STAT_PERIOD.each do |type, key|
                %li{:class => @period_key == key ? :active : nil}
                  %a{:href => "#", "data-key" => type, "data-prefix" => t(".last_prefix")}= t("stat_period.#{key}").capitalize

          #version.dropdown
            %a.dropdown-toggle{"data-toggle" => :dropdown, :href => "#"}
              %span
                #{t("versions_prefix")}
                %span= t("all")
              %strong.caret
            %ul.dropdown-menu
              %li{:class => !@filters[:version_id] ? :active : nil}
                %a{:href => "#", "data-key" => "", "data-prefix" => t("versions_prefix")}= t("all")
              %li.divider

              - GameVersion.sort(:created_at.desc).only(:version).each do |version|
                %li{:class => @filters[:version_id] == version._id ? :active : nil}
                  %a{:href => "#", "data-key" => version.version.parameterize, "data-prefix" => t("version_prefix")}= t("version", :version => version.version)


          %input.btn.btn-success{:type => :submit, :value => t(".search"), "data-loading-text" => t(".searching")}
      .clearfix

    .span3#live-search
      .well.well-small.well-trimmed
        %form.navbar-search.pull-right
          %input.input-medium{:type => :text, :placeholder => t("scroll_placeholder")}
        .clearfix

    :javascript
      $("#pricing_index").find(".dropdown").each(function(){ var active = $(this).find("ul.dropdown-menu li.active a"); $(this).find("a.dropdown-toggle span").html(active.data("prefix") + " <span>" + active.text() + "</span>"); });

  .row
    .span12
      %table.table.table-bordered.table-hover.table-striped
        %thead
          %tr
            %th.icon
            %th.name!= sort_header(t(".name"), "name")
            %th.resource!= sort_header(t(".cost"), "resource")
            %th.rarity!= sort_header(t(".rarity"), "rarity")
            %th.price.suggest!= sort_header(t(".sug_price"), "sug-price")
            %th.price!= sort_header(t(".buy_price"), "buy-price")
            %th.units!= sort_header(t(".buy_seen"), "buy-popularity")
            %th.price!= sort_header(t(".sell_price"), "sell-price")
            %th.units!= sort_header(t(".sell_seen"), "sell-popularity")
            %th.seen!= sort_header(t(".last_seen"), "last-seen")

        %tbody
          - @cards.each do |card|
            %tr
              %td.icon
                = image_tag("cards/tiny-#{card.image_id}.png", :class => "cards size-tiny")
              %td.name.card-tt{"data-name" => card.name, "data-card-id" => card.card_id}
                = link_to(card.name, cards_path(card.card_id, card.name.parameterize))

              %td.resource
                != card.costs.map {|type| "#{content_tag(:div, "", :class => "resources resource-#{type} size-28")}#{content_tag(:span, "#{card["cost_#{type}"]}")}"}.join(" / ")

              %td.rarity
                %span{:class => "rarity-#{card.rarity}"}= t("rarities.#{card.rarity}")

              %td.price.suggest
                - if card.pricing[@period_key] and card.pricing[@period_key]["sug"]
                  #{number_with_delimiter(round_number(card.pricing[@period_key]["sug"], 5))}#{t("gold_suffix")}
                - else
                  \---

              - units = 0
              - if card.pricing[@period_key] and card.pricing[@period_key]["buy"]
                %td.price
                  %span.gold
                    #{number_with_delimiter(round_number(card.pricing[@period_key]["buy"]["p95"], 5))}#{t("gold_suffix")}
                %td.units= number_with_delimiter(card.pricing[@period_key]["buy"]["total"])
              - else
                %td.price ---
                %td.units ---


              - if card.pricing[@period_key] and card.pricing[@period_key]["sell"]
                %td.price
                  %span.gold
                    #{number_with_delimiter(round_number(card.pricing[@period_key]["sell"]["p95"], 5))}#{t("gold_suffix")}
                %td.units= number_with_delimiter(card.pricing[@period_key]["sell"]["total"])
              - else
                %td.price ---
                %td.units ---

              %td.seen= card.price_seen_at? ? relative_time(card.price_seen_at, :short_ago) : "---"

          - if @cards.empty?
            %tr
              %td{:colspan => 9}
                %span.text-error= t(".no_cards_found")